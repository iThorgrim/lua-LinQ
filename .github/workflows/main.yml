name: Compile MoonScript and Create PR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    if: github.event.pull_request.head.ref != 'replace-moon-with-lua'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check for MoonScript files
      run: |
        if find . -name "*.moon" | grep -q .; then
          echo "found_moonscript=true" >> $GITHUB_ENV
        else
          echo "No .moon files found. Exiting."
          echo "found_moonscript=false" >> $GITHUB_ENV
          exit 0
        fi

    - name: Install dependencies
      if: env.found_moonscript == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.1 liblua5.1-dev luarocks gh
        sudo luarocks install moonscript

    - name: Compile MoonScript to Lua and remove MoonScript
      if: env.found_moonscript == 'true'
      run: |
        find . -name "*.moon" -exec moonc {} \; -exec rm {} \;

    - name: Create and checkout new branch for PR
      if: env.found_moonscript == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git fetch origin
        git checkout -B replace-moon-with-lua

    - name: Commit changes
      if: env.found_moonscript == 'true'
      run: |
        git add .
        git commit -m "Replace .moon files with compiled .lua files"

    - name: Push changes and create PR
      if: env.found_moonscript == 'true'
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      run: |
        echo "$API_TOKEN_GITHUB" | gh auth login --with-token
        git push --set-upstream origin replace-moon-with-lua
        PR_URL=$(gh pr create --title "Replace .moon files with compiled .lua files" --body "This PR replaces all .moon files with their compiled .lua versions.")
        gh pr merge "$PR_URL" --squash --admin
        gh pr view "$PR_URL" --json headRefName -q .headRefName | xargs -I {} git push origin --delete {}
